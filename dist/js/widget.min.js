!function(t,e,n,o){"use strict";function i(e,n){this.element=e,this.page=t(e).find(".page"),this.options=t.extend({},a,n),this._defaults=a,this._name=s,this.init()}var s="autoScroll",a={by:"continuous",speed:"medium",pause:5},l=!0,r=null,c=null,u=null;i.prototype={init:function(){var e,n,i=this,s=null,a=null,l=null,p=t(this.element).outerHeight(!0),d=p,f=this.element.scrollHeight-this.element.offsetHeight;this.canScroll()&&("page"===this.options.by?(e="fastest"===this.options.speed?.4:"fast"===this.options.speed?.8:"medium"===this.options.speed?1.2:"slow"===this.options.speed?1.6:2,n=this.page.outerHeight(!0)/t(this.element).outerHeight(!0)*e):(e="fastest"===this.options.speed?60:"fast"===this.options.speed?50:"medium"===this.options.speed?40:"slow"===this.options.speed?30:20,n=Math.abs((this.page.outerHeight(!0)-t(this.element).outerHeight(!0))/e)),Draggable.create(this.element,{type:"scrollTop",throwProps:!0,edgeResistance:.75,onPress:function(){c.pause(),TweenLite.killDelayedCallsTo(s),TweenLite.killDelayedCallsTo(a),TweenLite.killDelayedCallsTo(u),TweenLite.killDelayedCallsTo(l)},onRelease:function(){"none"!==i.options.by&&TweenLite.delayedCall(i.options.pause,s=function(){d=t(i.element).scrollTop()+p,c.progress(t(i.element).scrollTop()/f).play()})}}),r=Draggable.get(this.element),c=TweenLite.to(r.scrollProxy,n,{scrollTop:f,ease:Linear.easeNone,delay:this.options.pause,paused:!0,onUpdate:"page"===this.options.by?function(){Math.abs(r.scrollProxy.top())>=d&&(c.pause(),d+=p,TweenLite.delayedCall(i.options.pause,l=function(){c.resume()}))}:o,onComplete:function(){TweenLite.delayedCall(i.options.pause,a=function(){TweenLite.to(i.page,1,{autoAlpha:0,onComplete:function(){c.seek(0).pause(),"page"===i.options.by&&(d=p),t(i.element).trigger("done")}})})}}),TweenLite.set(this.element,{overflowY:"hidden"}))},canScroll:function(){return this.options&&this.page.height()>t(this.element).height()}},i.prototype.play=function(){this.canScroll()&&"none"!==this.options.by&&c&&(l?(c.play(),l=!1):(TweenLite.to(this.page,1,{autoAlpha:1}),TweenLite.delayedCall(this.options.pause,u=function(){c.play()})))},i.prototype.pause=function(){c&&c.pause()},i.prototype.stop=function(){c&&c.kill(),this.element=null,this.page=null},t.fn.autoScroll=function(e){return this.each(function(){t.data(this,"plugin_"+s)||t.data(this,"plugin_"+s,new i(this,e))})}}(jQuery,window,document);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function t(t,e){var n="font-family:"+e.font.family+"; ",o="color: "+e.color+"; ",i="font-size: "+e.size+"px; ",s="font-weight: "+(e.bold?"bold":"normal")+"; ",a="font-style: "+(e.italic?"italic":"normal")+"; ",l="text-decoration: "+(e.underline?"underline":"none")+"; ",r="background-color: "+e.highlightColor+"; ";return"."+t+" {"+n+o+i+s+a+l+r+"}"}function e(t){for(var e=document.createElement("style"),n=0,o=t.length;o>n;n++)e.appendChild(document.createTextNode(t[n]));document.head.appendChild(e)}function n(n,s){n.forEach(function(n){n.class&&n.fontSetting&&e([t(n.class,n.fontSetting)]),n.fontSetting.font.type&&("custom"===n.fontSetting.font.type&&n.fontSetting.font.family&&n.fontSetting.font.url?o(n.fontSetting.font.family,n.fontSetting.font.url,s):"google"===n.fontSetting.font.type&&n.fontSetting.font.family&&i(n.fontSetting.font.family,s))})}function o(t,e,n){var o=null,i="font-family: "+t+"; src: url('"+e+"');";n=n||document,o=n.styleSheets[0],null!==o&&o.addRule("@font-face",i)}function i(t,e){var n=document.createElement("link");e=e||document,n.setAttribute("rel","stylesheet"),n.setAttribute("type","text/css"),n.setAttribute("href","https://fonts.googleapis.com/css?family="+t),null!==n&&e.getElementsByTagName("head")[0].appendChild(n)}function s(t){for(var e=t.length,n=[],o=0;e>o;o++)n[o]=new Image,n[o].src=t[o]}return{getFontCssStyle:t,addCSSRules:e,loadFonts:n,loadCustomFont:o,loadGoogleFont:i,preloadImages:s}}();var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-13"]),_gaq.push(["_trackPageview"]),function(){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(t,e)}();var RiseVision=RiseVision||{};RiseVision.Text={},RiseVision.Text=function(t){"use strict";function e(){t.rpc.call("","rsevent_ready",null,r.getString("id"),!0,!0,!0,!0,!0)}function n(){t.rpc.call("","rsevent_done",null,r.getString("id"))}function o(t,o){if("additionalParams"===t&&o){var s=JSON.parse(o),a=s.data,l=[];$("#container").height(r.getInt("rsH")).css("background-color",s.background||"transparent"),$(".page").width(r.getInt("rsW")).html(a),$.each($("<div/>").html(a).find("span").addBack(),function(){var t=$(this).attr("data-standard-font"),e=$(this).attr("data-google-font"),n=$(this).attr("data-custom-font"),o="",s="",a=[];t&&l.push(i(t)),e&&(c.loadGoogleFont(e),l.push(i(e))),n&&(c.loadCustomFont(n,$(this).attr("data-custom-font-url")),l.push(i(n))),a=this.className.split(" "),o=$(this).attr("data-text-color"),s=$(this).attr("data-highlight-color");for(var r=0,u=a.length;u>r;r++)0===a[r].indexOf("wysiwyg-text-color")?l.push("."+a[r]+" { color: "+o+"; }"):0===a[r].indexOf("wysiwyg-highlight-color")&&l.push("."+a[r]+" { background-color: "+s+"; }")}),c.addCSSRules(l),$("#container").autoScroll(s.scroll).on("done",function(){n()})}e()}function i(t){return".wysiwyg-font-family-"+t.replace(/ /g,"-").toLowerCase()+" { font-family: '"+t+"', serif; }"}function s(){$("#container").data("plugin_autoScroll").play()}function a(){$("#container").data("plugin_autoScroll").pause()}function l(){a()}var r=new t.Prefs,c=RiseVision.Common.Utilities;return{getAdditionalParams:o,play:s,pause:a,stop:l}}(gadgets),function(t,e){"use strict";function n(){RiseVision.Text.play()}function o(){RiseVision.Text.pause()}function i(){RiseVision.Text.stop()}var s=new e.Prefs,a=s.getString("id");a&&(e.rpc.register("rscmd_play_"+a,n),e.rpc.register("rscmd_pause_"+a,o),e.rpc.register("rscmd_stop_"+a,i),e.rpc.register("rsparam_set_"+a,RiseVision.Text.getAdditionalParams),e.rpc.call("","rsparam_get",null,a,"additionalParams")),t.oncontextmenu=function(){return!1}}(window,gadgets);
//# sourceMappingURL=data:application/json;base64,